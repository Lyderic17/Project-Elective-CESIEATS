swagger: '2.0'
info:
  description: The API that retrieves the data in from the platform.
  version: 1.0.0
  title: Elective API
  contact:
    email: matthieu.carteron@viacesi.fr
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: 'localhost:3000'
schemes:
  - http
paths:
  /user/{id}:
    get:
      summary: Get user data by ID
      description: Retrieving user data by ID.
      operationId: getUserById
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: User ID.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid input
        '500':
          description: Internal error
      security:
        - BearerAuth: []
  /user/one/:
    get:
      summary: Get user data
      description: Retrieving a single user by filter.
      operationId: getUserOne
      produces:
        - application/json
      parameters:
        - in: query
          name: email
          type: string
          description: User email.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid input
        '500':
          description: Internal error
      security:
        - BearerAuth: []
  /user/:
    post:
      summary: Create user
      description: Create a new user.
      operationId: postUser
      parameters:
        - in: body
          name: Request body
          description: User to add.
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid input
        '500':
          description: Internal error
      security:
        - BearerAuth: []
    put:
      summary: Update user
      description: Updates an existing user.
      operationId: putUser
      parameters:
        - in: body
          name: Request body
          description: User to update.
          schema:
            $ref: '#/definitions/User'
      responses:
        '204':
          description: OK
        '400':
          description: Invalid input
        '500':
          description: Internal error
      security:
        - BearerAuth: []
  /restaurant/{id}:
    get:
      summary: Get restaurant data by ID
      description: Retrieving restaurant data by ID.
      operationId: getRestaurantById
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Restaurant ID.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Restaurant'
        '400':
          description: Invalid input
        '500':
          description: Internal error
      security:
        - BearerAuth: []
  /restaurant/:
    get:
      summary: Get restaurant data
      description: Retrieving multiple restaurants by filter.
      operationId: getRestaurant
      produces:
        - application/json
      parameters:
        - in: query
          name: status
          type: string
          description: Filter by status (separated by ';').
        - in: query
          name: limit
          type: integer
          minimum: 1
          description: Limit the number of results.
        - in: query
          name: offset
          type: integer
          minimum: 1
          description: Offset the results.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Restaurant'
        '400':
          description: Invalid input
        '500':
          description: Internal error
      security:
        - BearerAuth: []
  /menu/{id}:
    get:
      summary: Get menu data by ID
      description: Retrieving menu data by ID.
      operationId: getMenuById
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Menu ID.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Menu'
        '400':
          description: Invalid input
        '500':
          description: Internal error
      security:
        - BearerAuth: []
  /menu/restaurant/{id}:
    get:
      summary: Get menu data by restaurant ID
      description: Retrieving multiple menus by restaurant ID.
      operationId: getMenuByRestaurantId
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Restaurant ID.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Menu'
        '400':
          description: Invalid input
        '500':
          description: Internal error
      security:
        - BearerAuth: []
  /menu/:
    get:
      summary: Get menu data
      description: Retrieving multiple menus by filter.
      operationId: getMenu
      produces:
        - application/json
      parameters:
        - in: query
          name: limit
          type: integer
          minimum: 1
          description: Limit the number of results.
        - in: query
          name: offset
          type: integer
          minimum: 1
          description: Offset the results.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Menu'
        '400':
          description: Invalid input
        '500':
          description: Internal error
      security:
        - BearerAuth: []
  /order/client/{id}:
    get:
      summary: Get order data by client ID
      description: Retrieving order data by client ID.
      operationId: getOrderByClientId
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: User ID.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: Invalid input
        '500':
          description: Internal error
      security:
        - BearerAuth: []
  /order/restaurant/{id}:
    get:
      summary: Get order data by restaurant ID
      description: Retrieving order data by restaurant ID.
      operationId: getOrderByRestaurantId
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          required: true
          type: string
          description: Restaurant ID.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: Invalid input
        '500':
          description: Internal error
      security:
        - BearerAuth: []
  /order/:
    get:
      summary: Get order data
      description: Retrieving multiple orders by filter.
      operationId: getOrder
      produces:
        - application/json
      parameters:
        - in: query
          name: status
          type: string
          description: Filter by status (separated by ';').
        - in: query
          name: client
          type: integer
          description: Filter by client ID.
        - in: query
          name: limit
          type: integer
          minimum: 1
          description: Limit the number of results.
        - in: query
          name: offset
          type: integer
          minimum: 1
          description: Offset the results.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Order'
        '400':
          description: Invalid input
        '500':
          description: Internal error
      security:
        - BearerAuth: []
    post:
      summary: Create order
      description: Create an order.
      operationId: postOrder
      parameters:
        - in: body
          name: Request body
          description: Order to add.
          schema:
            $ref: '#/definitions/Order'
      responses:
        '204':
          description: OK
        '400':
          description: Invalid input
        '500':
          description: Internal error
      security:
        - BearerAuth: []
    put:
      summary: Update order
      description: Updates an existing order.
      operationId: putOrder
      parameters:
        - in: body
          name: Request body
          description: Order to update.
          schema:
            $ref: '#/definitions/Order'
      responses:
        '204':
          description: OK
        '400':
          description: Invalid input
        '500':
          description: Internal error
      security:
        - BearerAuth: []
  /login/:
    post:
      summary: Log-in user
      description: Log-in an user.
      operationId: login
      produces:
        - application/json
      parameters:
        - in: body
          name: Request body
          description: Log-in informations.
          schema:
            $ref: '#/definitions/LoginRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: Invalid input
        '500':
          description: Internal error
  /logout/:
    post:
      summary: Log-out user
      description: Log-out an user and remove its stored authentication tokens.
      operationId: logout
      produces:
        - application/json
      parameters:
        - in: body
          name: Request body
          description: Log-out informations.
          schema:
            $ref: '#/definitions/LogoutRequest'
      responses:
        '204':
          description: OK
        '400':
          description: Invalid input
        '500':
          description: Internal error
  /token/:
    post:
      summary: Refresh token
      description: Refresh an user's token.
      operationId: token
      produces:
        - application/json
      parameters:
        - in: body
          name: Request body
          description: Token informations.
          schema:
            $ref: '#/definitions/TokenRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TokenResponse'
        '400':
          description: Invalid input
        '500':
          description: Internal error
securityDefinitions:
  BearerAuth:
    type: basic
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      usertype:
        type: integer
        format: int32
      email:
        type: string
      password:
        type: string
        format: password
      firstName:
        type: string
      lastName:
        type: string
      address:
        type: array
        items:
          $ref: '#/definitions/Address'
      billing:
        type: array
        items:
          $ref: '#/definitions/Billing'
    required:
      - id
      - username
      - usertype
      - email
      - password
  Restaurant:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      address:
        $ref: '#/definitions/Address'
      status:
        type: string
      image:
        $ref: '#/definitions/Image'
      openings:
        type: array
        items:
          $ref: '#/definitions/Opening'
      tags:
        type: array
        items:
          type: string
      description:
        type: string
      menus:
        type: array
        items:
          $ref: '#/definitions/Menu'
  Menu:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      image:
        $ref: '#/definitions/Image'
      price:
        $ref: '#/definitions/Price'
      items:
        type: array
        items:
          type: string
  Order:
    type: object
    properties:
      id:
        type: string
      clientId:
        type: integer
        format: int64
      restaurantId:
        type: string
      address:
        $ref: '#/definitions/Address'
      date:
        type: string
        format: date-time
      status:
        type: string
      taxes:
        $ref: '#/definitions/Price'
      menus:
        type: array
        items:
          $ref: '#/definitions/Menu'
      assign:
        type: string
  Address:
    type: object
    properties:
      country:
        type: string
      zipcode:
        type: string
      city:
        type: string
      address:
        type: string
    required:
      - country
      - zipcode
  Billing:
    type: object
    properties:
      number:
        type: string
      crypto:
        type: string
      owner:
        type: string
  Opening:
    type: object
    properties:
      open:
        type: string
        format: date-time
      close:
        type: string
        format: date-time
  Price:
    type: object
    properties:
      value:
        type: string
      currency:
        type: string
  Image:
    type: object
    properties:
      url:
        type: string
      alt:
        type: string
  LoginRequest:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
        format: password
    required:
      - email
      - password
  LoginResponse:
    type: object
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
  LogoutRequest:
    type: object
    properties:
      token:
        type: string
    required:
      - token
  TokenRequest:
    type: object
    properties:
      token:
        type: string
    required:
      - token
  TokenResponse:
    type: object
    properties:
      accessToken:
        type: string
externalDocs:
  description: Project repository
  url: 'https://github.com/RubisetCie/Projet-Elective'
